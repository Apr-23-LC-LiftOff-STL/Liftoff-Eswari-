{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  get isLoggedIn() {\n    return this.isLoggedIn$.asObservable();\n  }\n  constructor(http) {\n    this.http = http;\n    this.isLoggedIn$ = new BehaviorSubject(false);\n  }\n  login(username, password) {\n    // Make an HTTP POST request to the login endpoint\n    return this.http.post('/auth/login', {\n      username,\n      password\n    }).pipe(tap(response => {\n      // Check the response and update isLoggedIn$ accordingly\n      const token = response.token; // Assuming the token property is returned in the response\n      this.isLoggedIn$.next(token != null);\n    }));\n  }\n  logout() {\n    // Make an HTTP POST request to the logout endpoint\n    return this.http.post('/auth/logout', {}).pipe(tap(() => {\n      // Update isLoggedIn$ to false\n      this.isLoggedIn$.next(false);\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","isLoggedIn","isLoggedIn$","asObservable","constructor","http","login","username","password","post","pipe","response","token","next","logout","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\wtwen\\development\\LaunchCode\\Liftoff\\Liftoff-Eswari-\\alongtheway-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private isLoggedIn$ = new BehaviorSubject<boolean>(false);\n\n  get isLoggedIn(): Observable<boolean> {\n    return this.isLoggedIn$.asObservable();\n  }\n\n  constructor(private http: HttpClient) {}\n\n  login(username: string, password: string): Observable<any> {\n    // Make an HTTP POST request to the login endpoint\n    return this.http.post<any>('/auth/login', { username, password }).pipe(\n      tap(response => {\n        // Check the response and update isLoggedIn$ accordingly\n        const token = response.token; // Assuming the token property is returned in the response\n        this.isLoggedIn$.next(token != null);\n      })\n    );\n  }\n\n  logout(): Observable<any> {\n    // Make an HTTP POST request to the logout endpoint\n    return this.http.post<any>('/auth/logout', {}).pipe(\n      tap(() => {\n        // Update isLoggedIn$ to false\n        this.isLoggedIn$.next(false);\n      })\n    );\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAEpC,MAGaC,WAAW;EAGtB,IAAIC,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;EACxC;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANhB,KAAAH,WAAW,GAAG,IAAIJ,eAAe,CAAU,KAAK,CAAC;EAMlB;EAEvCQ,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACA,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,aAAa,EAAE;MAAEF,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CACpEX,GAAG,CAACY,QAAQ,IAAG;MACb;MACA,MAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAK,CAAC,CAAC;MAC9B,IAAI,CAACV,WAAW,CAACW,IAAI,CAACD,KAAK,IAAI,IAAI,CAAC;IACtC,CAAC,CAAC,CACH;EACH;EAEAE,MAAMA,CAAA;IACJ;IACA,OAAO,IAAI,CAACT,IAAI,CAACI,IAAI,CAAM,cAAc,EAAE,EAAE,CAAC,CAACC,IAAI,CACjDX,GAAG,CAAC,MAAK;MACP;MACA,IAAI,CAACG,WAAW,CAACW,IAAI,CAAC,KAAK,CAAC;IAC9B,CAAC,CAAC,CACH;EACH;;;mBA5BWb,WAAW,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXlB,WAAW;EAAAmB,OAAA,EAAXnB,WAAW,CAAAoB,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPrB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}