{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nclass AuthService {\n  constructor() {\n    this.isLoggedIn$ = new BehaviorSubject(false);\n  }\n  get isLoggedIn() {\n    return this.isLoggedIn$.asObservable();\n  }\n  login() {\n    this.isLoggedIn$.next(true);\n  }\n  logout() {\n    this.isLoggedIn$.next(false);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)();\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","AuthService","constructor","isLoggedIn$","isLoggedIn","asObservable","login","next","logout","factory","ɵfac","providedIn"],"sources":["C:\\Users\\wtwen\\development\\LaunchCode\\Liftoff\\Liftoff-Eswari-\\alongtheway-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private isLoggedIn$ = new BehaviorSubject<boolean>(false);\n\n  get isLoggedIn() {\n    return this.isLoggedIn$.asObservable();\n  }\n\n  login() {\n    this.isLoggedIn$.next(true);\n  }\n\n  logout() {\n    this.isLoggedIn$.next(false);\n  }\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAEtC,MAGaC,WAAW;EAHxBC,YAAA;IAIU,KAAAC,WAAW,GAAG,IAAIH,eAAe,CAAU,KAAK,CAAC;;EAEzD,IAAII,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACD,WAAW,CAACE,YAAY,EAAE;EACxC;EAEAC,KAAKA,CAAA;IACH,IAAI,CAACH,WAAW,CAACI,IAAI,CAAC,IAAI,CAAC;EAC7B;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACL,WAAW,CAACI,IAAI,CAAC,KAAK,CAAC;EAC9B;;;mBAbWN,WAAW;AAAA;;SAAXA,WAAW;EAAAQ,OAAA,EAAXR,WAAW,CAAAS,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPV,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}