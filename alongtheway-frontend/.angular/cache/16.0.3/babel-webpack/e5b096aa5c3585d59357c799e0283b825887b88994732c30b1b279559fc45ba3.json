{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  get isLoggedIn() {\n    return this.isLoggedIn$.asObservable();\n  }\n  get getUsername() {\n    return this.username$.asObservable(); // Return the username observable\n  }\n\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.isLoggedIn$ = new BehaviorSubject(false);\n    this.username$ = new BehaviorSubject(''); // Add the username property\n    // Check if token exists in localStorage\n    const token = localStorage.getItem('token');\n    this.isLoggedIn$.next(!!token);\n    this.username$.next(token ? this.getUsernameFromToken(token) : '');\n  }\n  login(username, password) {\n    const url = 'http://localhost:8080/auth/login'; // Replace with the actual backend URL\n    const loginData = {\n      username: username,\n      password: password\n    };\n    return this.http.post(url, loginData).pipe(tap(response => {\n      const token = response.token;\n      localStorage.setItem('token', token);\n      this.isLoggedIn$.next(!!token);\n      this.username$.next(this.getUsernameFromToken(token)); // Set the value of the username property\n      if (!!token) {\n        this.router.navigate(['/home']);\n      }\n    }));\n  }\n  logout() {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n    // Update isLoggedIn$ to false\n    this.isLoggedIn$.next(false);\n    this.username$.next('');\n    // Make an HTTP POST request to the logout endpoint\n    return this.http.post('/auth/logout', {});\n  }\n  getUsernameFromToken(token) {\n    // Implement your logic to extract the username from the token\n    // and return it here\n    return '';\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","isLoggedIn","isLoggedIn$","asObservable","getUsername","username$","constructor","http","router","token","localStorage","getItem","next","getUsernameFromToken","login","username","password","url","loginData","post","pipe","response","setItem","navigate","logout","removeItem","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\wtwen\\development\\LaunchCode\\Liftoff\\Liftoff-Eswari-\\alongtheway-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private isLoggedIn$ = new BehaviorSubject<boolean>(false);\n  private username$ = new BehaviorSubject<string>(''); // Add the username property\n\n  get isLoggedIn(): Observable<boolean> {\n    return this.isLoggedIn$.asObservable();\n  }\n\n  get getUsername(): Observable<string> {\n    return this.username$.asObservable(); // Return the username observable\n  }\n\n  constructor(private http: HttpClient, private router: Router) {\n    // Check if token exists in localStorage\n    const token = localStorage.getItem('token');\n    this.isLoggedIn$.next(!!token);\n    this.username$.next(token ? this.getUsernameFromToken(token) : '');\n  }\n\n  login(username: string, password: string): Observable<any> {\n    const url = 'http://localhost:8080/auth/login'; // Replace with the actual backend URL\n    const loginData = {\n      username: username,\n      password: password\n    };\n    return this.http.post(url, loginData).pipe(\n      tap(response => {\n        const token = (response as any).token as string;\n        localStorage.setItem('token', token);\n        this.isLoggedIn$.next(!!token);\n        this.username$.next(this.getUsernameFromToken(token)); // Set the value of the username property\n        if (!!token) {\n          this.router.navigate(['/home']);\n        }\n      })\n      \n    );\n  }\n\n  logout(): Observable<any> {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n\n    // Update isLoggedIn$ to false\n    this.isLoggedIn$.next(false);\n    this.username$.next('');\n\n    // Make an HTTP POST request to the logout endpoint\n    return this.http.post<any>('/auth/logout', {});\n  }\n\n  private getUsernameFromToken(token: string): string {\n    // Implement your logic to extract the username from the token\n    // and return it here\n    return '';\n  }\n}\n"],"mappings":"AAGA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;;AAEpC,MAGaC,WAAW;EAItB,IAAIC,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;EACxC;EAEA,IAAIC,WAAWA,CAAA;IACb,OAAO,IAAI,CAACC,SAAS,CAACF,YAAY,EAAE,CAAC,CAAC;EACxC;;EAEAG,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAX5C,KAAAN,WAAW,GAAG,IAAIJ,eAAe,CAAU,KAAK,CAAC;IACjD,KAAAO,SAAS,GAAG,IAAIP,eAAe,CAAS,EAAE,CAAC,CAAC,CAAC;IAWnD;IACA,MAAMW,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACT,WAAW,CAACU,IAAI,CAAC,CAAC,CAACH,KAAK,CAAC;IAC9B,IAAI,CAACJ,SAAS,CAACO,IAAI,CAACH,KAAK,GAAG,IAAI,CAACI,oBAAoB,CAACJ,KAAK,CAAC,GAAG,EAAE,CAAC;EACpE;EAEAK,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,MAAMC,GAAG,GAAG,kCAAkC,CAAC,CAAC;IAChD,MAAMC,SAAS,GAAG;MAChBH,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEA;KACX;IACD,OAAO,IAAI,CAACT,IAAI,CAACY,IAAI,CAACF,GAAG,EAAEC,SAAS,CAAC,CAACE,IAAI,CACxCrB,GAAG,CAACsB,QAAQ,IAAG;MACb,MAAMZ,KAAK,GAAIY,QAAgB,CAACZ,KAAe;MAC/CC,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEb,KAAK,CAAC;MACpC,IAAI,CAACP,WAAW,CAACU,IAAI,CAAC,CAAC,CAACH,KAAK,CAAC;MAC9B,IAAI,CAACJ,SAAS,CAACO,IAAI,CAAC,IAAI,CAACC,oBAAoB,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;MACvD,IAAI,CAAC,CAACA,KAAK,EAAE;QACX,IAAI,CAACD,MAAM,CAACe,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;IAEnC,CAAC,CAAC,CAEH;EACH;EAEAC,MAAMA,CAAA;IACJ;IACAd,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;IAEhC;IACA,IAAI,CAACvB,WAAW,CAACU,IAAI,CAAC,KAAK,CAAC;IAC5B,IAAI,CAACP,SAAS,CAACO,IAAI,CAAC,EAAE,CAAC;IAEvB;IACA,OAAO,IAAI,CAACL,IAAI,CAACY,IAAI,CAAM,cAAc,EAAE,EAAE,CAAC;EAChD;EAEQN,oBAAoBA,CAACJ,KAAa;IACxC;IACA;IACA,OAAO,EAAE;EACX;;;mBAvDWT,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAAX/B,WAAW;EAAAgC,OAAA,EAAXhC,WAAW,CAAAiC,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPlC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}