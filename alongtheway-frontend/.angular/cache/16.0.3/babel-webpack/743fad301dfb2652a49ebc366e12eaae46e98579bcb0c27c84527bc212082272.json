{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  get isLoggedIn() {\n    return this.isLoggedIn$.asObservable();\n  }\n  constructor(http) {\n    this.http = http;\n    this.isLoggedIn$ = new BehaviorSubject(false);\n    // Check if token exists in localStorage\n    const token = localStorage.getItem('token');\n    this.isLoggedIn$.next(!!token);\n  }\n  login(username, password) {\n    const url = 'http://localhost:8080/auth/login'; // Replace with the actual backend URL\n    const loginData = {\n      username: username,\n      password: password\n    };\n    return this.http.post(url, loginData).pipe(tap(response => {\n      const token = response.token; // Use type assertion to access the 'token' property\n      localStorage.setItem('token', token); // Save token to localStorage\n      this.isLoggedIn$.next(!!token);\n    }));\n  }\n  logout() {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n    // Update isLoggedIn$ to false\n    this.isLoggedIn$.next(false);\n    // Make an HTTP POST request to the logout endpoint\n    return this.http.post('/auth/logout', {});\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","isLoggedIn","isLoggedIn$","asObservable","constructor","http","token","localStorage","getItem","next","login","username","password","url","loginData","post","pipe","response","setItem","logout","removeItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\wtwen\\development\\LaunchCode\\Liftoff\\Liftoff-Eswari-\\alongtheway-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private isLoggedIn$ = new BehaviorSubject<boolean>(false);\n\n  get isLoggedIn(): Observable<boolean> {\n    return this.isLoggedIn$.asObservable();\n  }\n\n  constructor(private http: HttpClient) {\n    // Check if token exists in localStorage\n    const token = localStorage.getItem('token');\n    this.isLoggedIn$.next(!!token);\n  }\n\n  login(username: string, password: string): Observable<any> {\n    const url = 'http://localhost:8080/auth/login'; // Replace with the actual backend URL\n    const loginData = {\n      username: username,\n      password: password\n    };\n    return this.http.post(url, loginData).pipe(\n      tap(response => {\n        const token = (response as any).token as string; // Use type assertion to access the 'token' property\n        localStorage.setItem('token', token); // Save token to localStorage\n        this.isLoggedIn$.next(!!token);\n      })\n    );\n  }\n  \n  \n  \n\n  logout(): Observable<any> {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n    \n    // Update isLoggedIn$ to false\n    this.isLoggedIn$.next(false);\n    \n    // Make an HTTP POST request to the logout endpoint\n    return this.http.post<any>('/auth/logout', {});\n  }\n  \n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAEpC,MAGaC,WAAW;EAGtB,IAAIC,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;EACxC;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANhB,KAAAH,WAAW,GAAG,IAAIJ,eAAe,CAAU,KAAK,CAAC;IAOvD;IACA,MAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACN,WAAW,CAACO,IAAI,CAAC,CAAC,CAACH,KAAK,CAAC;EAChC;EAEAI,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,MAAMC,GAAG,GAAG,kCAAkC,CAAC,CAAC;IAChD,MAAMC,SAAS,GAAG;MAChBH,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEA;KACX;IACD,OAAO,IAAI,CAACP,IAAI,CAACU,IAAI,CAACF,GAAG,EAAEC,SAAS,CAAC,CAACE,IAAI,CACxCjB,GAAG,CAACkB,QAAQ,IAAG;MACb,MAAMX,KAAK,GAAIW,QAAgB,CAACX,KAAe,CAAC,CAAC;MACjDC,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEZ,KAAK,CAAC,CAAC,CAAC;MACtC,IAAI,CAACJ,WAAW,CAACO,IAAI,CAAC,CAAC,CAACH,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;EAKAa,MAAMA,CAAA;IACJ;IACAZ,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;IAEhC;IACA,IAAI,CAAClB,WAAW,CAACO,IAAI,CAAC,KAAK,CAAC;IAE5B;IACA,OAAO,IAAI,CAACJ,IAAI,CAACU,IAAI,CAAM,cAAc,EAAE,EAAE,CAAC;EAChD;;;mBAxCWf,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXxB,WAAW;EAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEP3B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}