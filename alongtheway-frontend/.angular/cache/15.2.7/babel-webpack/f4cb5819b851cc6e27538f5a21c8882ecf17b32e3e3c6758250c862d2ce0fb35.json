{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class GasCalculatorComponent {\n  constructor() {\n    this.directionsService = new google.maps.DirectionsService();\n  }\n  ngOnInit() {\n    this.startInput = document.getElementById('startLocation');\n    this.endInput = document.getElementById('endLocation');\n    this.fuelCapacityInput = document.getElementById('fuelCapacity');\n    const startAutocomplete = new google.maps.places.Autocomplete(this.startInput);\n    const endAutocomplete = new google.maps.places.Autocomplete(this.endInput);\n    this.mpg = document.getElementById('mpg')?.value;\n    this.tankCapacity = document.getElementById('tankCapacity')?.value;\n    document.getElementById('mpg')?.addEventListener('change', () => {\n      this.mpg = document.getElementById('mpg')?.value;\n      this.updateFuelCapacity();\n    });\n    document.getElementById('tankCapacity')?.addEventListener('change', () => {\n      this.tankCapacity = document.getElementById('tankCapacity')?.value;\n      this.updateFuelCapacity();\n    });\n  }\n  updateFuelCapacity() {\n    const fuelCapacity = this.mpg * this.tankCapacity;\n    this.fuelCapacityInput.value = fuelCapacity.toFixed(2);\n  }\n  calculateFuelAndDistance() {\n    const startLocation = document.getElementById('startLocation').value;\n    const endLocation = document.getElementById('endLocation').value;\n    this.mpg = document.getElementById('mpg')?.value;\n    this.tankCapacity = document.getElementById('tankCapacity')?.value;\n    this.fuelCapacityInput = document.getElementById('fuelCapacity');\n    const distanceInput = document.getElementById('distance');\n    const stopsRequiredOutput = document.getElementById('stopsRequired');\n    if (startLocation !== '' && endLocation !== '' && this.mpg !== '' && this.tankCapacity !== '') {\n      this.directionsService.route({\n        origin: startLocation,\n        destination: endLocation,\n        travelMode: google.maps.TravelMode.DRIVING\n      }, (response, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          const distance = response.routes[0].legs[0].distance.value / 1609.34;\n          const distanceInput = document.getElementById('distance');\n          if (distanceInput) {\n            distanceInput.value = distance.toFixed(2);\n          }\n          const fuelCapacity = parseFloat(this.mpg) * parseFloat(this.tankCapacity);\n          this.fuelCapacityInput.value = fuelCapacity.toFixed(2);\n          const stopsRequired = Math.ceil(distance / fuelCapacity);\n          stopsRequiredOutput.innerHTML = `You will need to make ${stopsRequired} stop(s) for gas.`;\n        } else {\n          distanceInput.value = '';\n          this.fuelCapacityInput.value = '';\n          stopsRequiredOutput.innerHTML = '';\n          alert(`Directions request failed due to ${status}`);\n        }\n      });\n    } else {\n      distanceInput.value = '';\n      this.fuelCapacityInput.value = '';\n      stopsRequiredOutput.innerHTML = '';\n    }\n  }\n  onInputChange() {\n    this.calculateFuelAndDistance();\n  }\n}\nGasCalculatorComponent.ɵfac = function GasCalculatorComponent_Factory(t) {\n  return new (t || GasCalculatorComponent)();\n};\nGasCalculatorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GasCalculatorComponent,\n  selectors: [[\"app-gas-calculator\"]],\n  decls: 36,\n  vars: 0,\n  consts: [[\"for\", \"startLocation\"], [\"type\", \"text\", \"id\", \"startLocation\", \"name\", \"startLocation\"], [\"for\", \"endLocation\"], [\"type\", \"text\", \"id\", \"endLocation\", \"name\", \"endLocation\"], [\"for\", \"mpg\"], [\"type\", \"number\", \"id\", \"mpg\", \"name\", \"mpg\"], [\"for\", \"tankCapacity\"], [\"type\", \"number\", \"id\", \"tankCapacity\", \"name\", \"tankCapacity\"], [\"for\", \"fuelCapacity\"], [\"type\", \"text\", \"id\", \"fuelCapacity\", \"name\", \"fuelCapacity\", \"readonly\", \"\"], [\"for\", \"distance\"], [\"type\", \"text\", \"id\", \"distance\", \"name\", \"distance\", \"readonly\", \"\"], [\"id\", \"stopsRequired\"]],\n  template: function GasCalculatorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"html\")(1, \"head\")(2, \"title\");\n      i0.ɵɵtext(3, \"Fuel Calculator\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"body\")(5, \"label\", 0);\n      i0.ɵɵtext(6, \"Start Location:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 1)(8, \"br\")(9, \"br\");\n      i0.ɵɵelementStart(10, \"label\", 2);\n      i0.ɵɵtext(11, \"End Location:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 3)(13, \"br\")(14, \"br\");\n      i0.ɵɵelementStart(15, \"label\", 4);\n      i0.ɵɵtext(16, \"MPG:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 5)(18, \"br\")(19, \"br\");\n      i0.ɵɵelementStart(20, \"label\", 6);\n      i0.ɵɵtext(21, \"Tank Capacity:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(22, \"input\", 7)(23, \"br\")(24, \"br\");\n      i0.ɵɵelementStart(25, \"label\", 8);\n      i0.ɵɵtext(26, \"Fuel Capacity (Miles):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(27, \"input\", 9)(28, \"br\")(29, \"br\");\n      i0.ɵɵelementStart(30, \"label\", 10);\n      i0.ɵɵtext(31, \"Distance (Miles):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(32, \"input\", 11)(33, \"br\")(34, \"br\")(35, \"p\", 12);\n      i0.ɵɵelementEnd()();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\", \"label[_ngcontent-%COMP%] {\\n      display: block;\\n      margin-bottom: 10px;\\n    }\\n    input[type=text][_ngcontent-%COMP%] {\\n      padding: 5px;\\n      width: 100%;\\n      box-sizing: border-box;\\n      margin-bottom: 10px;\\n    }\\n    button[_ngcontent-%COMP%] {\\n      padding: 10px 20px;\\n      background-color: #4CAF50;\\n      color: white;\\n      border: none;\\n      border-radius: 4px;\\n      cursor: pointer;\\n      font-size: 16px;\\n    }\\n    button[_ngcontent-%COMP%]:hover {\\n      background-color: #45a049;\\n    }\\n    #output[_ngcontent-%COMP%] {\\n      margin-top: 20px;\\n    }\"]\n});","map":{"version":3,"mappings":"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","names":["GasCalculatorComponent","constructor","directionsService","google","maps","DirectionsService","ngOnInit","startInput","document","getElementById","endInput","fuelCapacityInput","startAutocomplete","places","Autocomplete","endAutocomplete","mpg","value","tankCapacity","addEventListener","updateFuelCapacity","fuelCapacity","toFixed","calculateFuelAndDistance","startLocation","endLocation","distanceInput","stopsRequiredOutput","route","origin","destination","travelMode","TravelMode","DRIVING","response","status","DirectionsStatus","OK","distance","routes","legs","parseFloat","stopsRequired","Math","ceil","innerHTML","alert","onInputChange","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\wtwen\\WebstormProjects\\Liftoff-Eswari-\\alongtheway-frontend\\src\\app\\gas-calculator\\gas-calculator.component.ts","C:\\Users\\wtwen\\WebstormProjects\\Liftoff-Eswari-\\alongtheway-frontend\\src\\app\\gas-calculator\\gas-calculator.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\ndeclare var google: any;\n\n@Component({\n  selector: 'app-gas-calculator',\n  templateUrl: './gas-calculator.component.html',\n  styleUrls: ['./gas-calculator.component.css']\n})\nexport class GasCalculatorComponent implements OnInit {\n  directionsService: any;\n  startInput: any;\n  endInput: any;\n  fuelCapacityInput: any;\n  mpg: any;\n  tankCapacity: any;\n\n  constructor() {\n    this.directionsService = new google.maps.DirectionsService();\n  }\n\n  ngOnInit(): void {\n    this.startInput = document.getElementById('startLocation');\n    this.endInput = document.getElementById('endLocation');\n    this.fuelCapacityInput = document.getElementById('fuelCapacity');\n\n    const startAutocomplete = new google.maps.places.Autocomplete(this.startInput);\n    const endAutocomplete = new google.maps.places.Autocomplete(this.endInput);\n\n    this.mpg = (document.getElementById('mpg') as HTMLInputElement)?.value;\n    this.tankCapacity = (document.getElementById('tankCapacity') as HTMLInputElement)?.value;\n\n    document.getElementById('mpg')?.addEventListener('change', () => {\n      this.mpg = (document.getElementById('mpg') as HTMLInputElement)?.value;\n      this.updateFuelCapacity();\n    });\n\n    document.getElementById('tankCapacity')?.addEventListener('change', () => {\n      this.tankCapacity = (document.getElementById('tankCapacity') as HTMLInputElement)?.value;\n      this.updateFuelCapacity();\n    });\n  }\n\n  updateFuelCapacity() {\n    const fuelCapacity = this.mpg * this.tankCapacity;\n    this.fuelCapacityInput.value = fuelCapacity.toFixed(2);\n  }\n\n  calculateFuelAndDistance() {\n    const startLocation = (document.getElementById('startLocation') as HTMLInputElement).value;\n    const endLocation = (document.getElementById('endLocation') as HTMLInputElement).value;\n    this.mpg = (document.getElementById('mpg') as HTMLInputElement)?.value;\n    this.tankCapacity = (document.getElementById('tankCapacity') as HTMLInputElement)?.value;\n    this.fuelCapacityInput = document.getElementById('fuelCapacity');\n    const distanceInput = document.getElementById('distance');\n    const stopsRequiredOutput = document.getElementById('stopsRequired');\n\n    if (startLocation !== '' && endLocation !== '' && this.mpg !== '' && this.tankCapacity !== '') {\n      this.directionsService.route(\n        {\n          origin: startLocation,\n          destination: endLocation,\n          travelMode: google.maps.TravelMode.DRIVING,\n        },\n        (response: any, status: any) => {\n          if (status === google.maps.DirectionsStatus.OK) {\n            const distance = response.routes[0].legs[0].distance.value / 1609.34;\n            const distanceInput = document.getElementById('distance') as HTMLInputElement;\n            if (distanceInput) {\n              distanceInput.value = distance.toFixed(2);\n            }\n\n            const fuelCapacity = parseFloat(this.mpg) * parseFloat(this.tankCapacity);\n            this.fuelCapacityInput.value = fuelCapacity.toFixed(2);\n\n            const stopsRequired = Math.ceil(distance / fuelCapacity);\n            stopsRequiredOutput!.innerHTML = `You will need to make ${stopsRequired} stop(s) for gas.`;\n          } else {\n            distanceInput.value = '';\n            this.fuelCapacityInput.value = '';\n            stopsRequiredOutput.innerHTML = '';\n            alert(`Directions request failed due to ${status}`);\n          }\n        }\n      );\n    } else {\n      distanceInput.value = '';\n      this.fuelCapacityInput.value = '';\n      stopsRequiredOutput.innerHTML = '';\n    }\n  }\n\n  onInputChange() {\n    this.calculateFuelAndDistance();\n  }\n}\n","<!DOCTYPE html>\n<html>\n<head>\n  <title>Fuel Calculator</title>\n  <style>\n    label {\n      display: block;\n      margin-bottom: 10px;\n    }\n    input[type=text] {\n      padding: 5px;\n      width: 100%;\n      box-sizing: border-box;\n      margin-bottom: 10px;\n    }\n    button {\n      padding: 10px 20px;\n      background-color: #4CAF50;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 16px;\n    }\n    button:hover {\n      background-color: #45a049;\n    }\n    #output {\n      margin-top: 20px;\n    }\n  </style>\n\n</head>\n<body>\n<label for=\"startLocation\">Start Location:</label>\n<input type=\"text\" id=\"startLocation\" name=\"startLocation\"><br><br>\n\n<label for=\"endLocation\">End Location:</label>\n<input type=\"text\" id=\"endLocation\" name=\"endLocation\"><br><br>\n\n<label for=\"mpg\">MPG:</label>\n<input type=\"number\" id=\"mpg\" name=\"mpg\"><br><br>\n\n<label for=\"tankCapacity\">Tank Capacity:</label>\n<input type=\"number\" id=\"tankCapacity\" name=\"tankCapacity\"><br><br>\n\n<label for=\"fuelCapacity\">Fuel Capacity (Miles):</label>\n<input type=\"text\" id=\"fuelCapacity\" name=\"fuelCapacity\" readonly><br><br>\n\n<label for=\"distance\">Distance (Miles):</label>\n<input type=\"text\" id=\"distance\" name=\"distance\" readonly><br><br>\n\n<p id=\"stopsRequired\"></p>\n\n\n<script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAveULz0kjUIAZ--Ufdo0n7wBswHdo_y8o&callback=initMap&libraries=places\" defer></script>\n<script src=\"script.js\"></script>\n</body>\n</html>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}