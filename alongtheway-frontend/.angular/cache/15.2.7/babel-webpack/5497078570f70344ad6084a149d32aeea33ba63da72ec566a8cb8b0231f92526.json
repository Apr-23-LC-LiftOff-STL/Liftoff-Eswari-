{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class GasCalculatorComponent {\n  constructor() {\n    this.startLocation = '';\n    this.endLocation = '';\n    this.fuelCapacity = '';\n    this.distance = '';\n    this.mpg = 0;\n    this.tankCapacity = 0;\n  }\n  ngOnInit() {\n    this.startInput = document.getElementById('startLocation');\n    this.endInput = document.getElementById('endLocation');\n    this.fuelCapacityInput = document.getElementById('fuelCapacity');\n    const startAutocomplete = new google.maps.places.Autocomplete(this.startInput);\n    const endAutocomplete = new google.maps.places.Autocomplete(this.endInput);\n    startAutocomplete.addListener('place_changed', () => {\n      this.calculateFuelAndDistance();\n    });\n    endAutocomplete.addListener('place_changed', () => {\n      this.calculateFuelAndDistance();\n    });\n    // ...\n  }\n\n  updateFuelCapacity() {\n    const fuelCapacity = this.mpg * this.tankCapacity;\n    this.fuelCapacity = fuelCapacity.toFixed(2);\n  }\n  calculateFuelAndDistance() {\n    if (this.startLocation && this.endLocation && this.mpg && this.tankCapacity) {\n      const directionsService = new google.maps.DirectionsService();\n      const startLocation = this.startLocation;\n      const endLocation = this.endLocation;\n      const mpg = this.mpg;\n      const tankCapacity = this.tankCapacity;\n      const fuelCapacityInput = document.getElementById('fuelCapacity');\n      const distanceInput = document.getElementById('distance');\n      const stopsRequiredOutput = document.getElementById('stopsRequired');\n      directionsService.route({\n        origin: startLocation,\n        destination: endLocation,\n        travelMode: google.maps.TravelMode.DRIVING\n      }, (response, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          const distance = response.routes[0].legs[0].distance.value / 1609.34;\n          if (distanceInput) {\n            this.distance = distance.toFixed(2);\n          }\n          const fuelCapacity = parseFloat(String(mpg)) * parseFloat(String(tankCapacity));\n          fuelCapacityInput.value = fuelCapacity.toFixed(2);\n          const stopsRequired = Math.ceil(distance / fuelCapacity);\n          if (stopsRequiredOutput) {\n            stopsRequiredOutput.innerHTML = `You will need to make ${stopsRequired} stop(s) for gas.`;\n          }\n        } else {\n          if (fuelCapacityInput) {\n            fuelCapacityInput.value = '';\n          }\n          if (stopsRequiredOutput) {\n            stopsRequiredOutput.innerHTML = '';\n          }\n          alert(`Directions request failed due to ${status}`);\n        }\n      });\n    } else {\n      const fuelCapacityInput = document.getElementById('fuelCapacity');\n      const stopsRequiredOutput = document.getElementById('stopsRequired');\n      if (fuelCapacityInput) {\n        fuelCapacityInput.value = '';\n      }\n      if (stopsRequiredOutput) {\n        stopsRequiredOutput.innerHTML = '';\n      }\n    }\n  }\n  onInputChange() {\n    this.calculateFuelAndDistance();\n  }\n}\nGasCalculatorComponent.ɵfac = function GasCalculatorComponent_Factory(t) {\n  return new (t || GasCalculatorComponent)();\n};\nGasCalculatorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GasCalculatorComponent,\n  selectors: [[\"app-gas-calculator\"]],\n  decls: 28,\n  vars: 6,\n  consts: [[\"for\", \"startLocation\"], [\"type\", \"text\", \"id\", \"startLocation\", \"name\", \"startLocation\", 3, \"ngModel\", \"ngModelChange\", \"input\"], [\"for\", \"endLocation\"], [\"type\", \"text\", \"id\", \"endLocation\", \"name\", \"endLocation\", 3, \"ngModel\", \"ngModelChange\", \"input\"], [\"for\", \"mpg\"], [\"type\", \"number\", \"id\", \"mpg\", \"name\", \"mpg\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"for\", \"tankCapacity\"], [\"type\", \"number\", \"id\", \"tankCapacity\", \"name\", \"tankCapacity\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"for\", \"fuelCapacity\"], [\"type\", \"text\", \"id\", \"fuelCapacity\", \"name\", \"fuelCapacity\", \"readonly\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"distance\"], [\"type\", \"text\", \"id\", \"distance\", \"name\", \"distance\", \"readonly\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"id\", \"stopsRequired\"], [\"type\", \"button\", 3, \"click\"]],\n  template: function GasCalculatorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"html\")(1, \"head\")(2, \"title\");\n      i0.ɵɵtext(3, \"Fuel Calculator\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"body\")(5, \"div\")(6, \"div\")(7, \"label\", 0);\n      i0.ɵɵtext(8, \"Start Location:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function GasCalculatorComponent_Template_input_ngModelChange_9_listener($event) {\n        return ctx.startLocation = $event;\n      })(\"input\", function GasCalculatorComponent_Template_input_input_9_listener() {\n        return ctx.onInputChange();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"label\", 2);\n      i0.ɵɵtext(11, \"End Location:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function GasCalculatorComponent_Template_input_ngModelChange_12_listener($event) {\n        return ctx.endLocation = $event;\n      })(\"input\", function GasCalculatorComponent_Template_input_input_12_listener() {\n        return ctx.onInputChange();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"label\", 4);\n      i0.ɵɵtext(14, \"MPG:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function GasCalculatorComponent_Template_input_ngModelChange_15_listener($event) {\n        return ctx.mpg = $event;\n      })(\"change\", function GasCalculatorComponent_Template_input_change_15_listener() {\n        return ctx.onInputChange();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"label\", 6);\n      i0.ɵɵtext(17, \"Tank Capacity:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"input\", 7);\n      i0.ɵɵlistener(\"ngModelChange\", function GasCalculatorComponent_Template_input_ngModelChange_18_listener($event) {\n        return ctx.tankCapacity = $event;\n      })(\"change\", function GasCalculatorComponent_Template_input_change_18_listener() {\n        return ctx.onInputChange();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"label\", 8);\n      i0.ɵɵtext(20, \"Fuel Capacity (Miles):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"input\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function GasCalculatorComponent_Template_input_ngModelChange_21_listener($event) {\n        return ctx.fuelCapacity = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"label\", 10);\n      i0.ɵɵtext(23, \"Distance (Miles):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"input\", 11);\n      i0.ɵɵlistener(\"ngModelChange\", function GasCalculatorComponent_Template_input_ngModelChange_24_listener($event) {\n        return ctx.distance = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(25, \"p\", 12);\n      i0.ɵɵelementStart(26, \"button\", 13);\n      i0.ɵɵlistener(\"click\", function GasCalculatorComponent_Template_button_click_26_listener() {\n        return ctx.calculateFuelAndDistance();\n      });\n      i0.ɵɵtext(27, \"Calculate\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngModel\", ctx.startLocation);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.endLocation);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.mpg);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.tankCapacity);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.fuelCapacity);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.distance);\n    }\n  },\n  dependencies: [i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgModel],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\", \"label[_ngcontent-%COMP%] {\\n      display: block;\\n      margin-bottom: 10px;\\n    }\\n    input[type=text][_ngcontent-%COMP%] {\\n      padding: 5px;\\n      width: 100%;\\n      box-sizing: border-box;\\n      margin-bottom: 10px;\\n    }\\n    button[_ngcontent-%COMP%] {\\n      padding: 10px 20px;\\n      background-color: #4CAF50;\\n      color: white;\\n      border: none;\\n      border-radius: 4px;\\n      cursor: pointer;\\n      font-size: 16px;\\n    }\\n    button[_ngcontent-%COMP%]:hover {\\n      background-color: #45a049;\\n    }\\n    #output[_ngcontent-%COMP%] {\\n      margin-top: 20px;\\n    }\"]\n});","map":{"version":3,"mappings":"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","names":["GasCalculatorComponent","constructor","ngOnInit","startInput","document","getElementById","endInput","fuelCapacityInput","startAutocomplete","google","maps","places","Autocomplete","endAutocomplete","addListener","calculateFuelAndDistance","updateFuelCapacity","fuelCapacity","mpg","tankCapacity","toFixed","startLocation","endLocation","directionsService","DirectionsService","distanceInput","stopsRequiredOutput","route","origin","destination","travelMode","TravelMode","DRIVING","response","status","DirectionsStatus","OK","distance","routes","legs","value","parseFloat","String","stopsRequired","Math","ceil","innerHTML","alert","onInputChange","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\wtwen\\WebstormProjects\\Liftoff-Eswari-\\alongtheway-frontend\\src\\app\\gas-calculator\\gas-calculator.component.ts","C:\\Users\\wtwen\\WebstormProjects\\Liftoff-Eswari-\\alongtheway-frontend\\src\\app\\gas-calculator\\gas-calculator.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\ndeclare var google: any;\n\n@Component({\n  selector: 'app-gas-calculator',\n  templateUrl: './gas-calculator.component.html',\n  styleUrls: ['./gas-calculator.component.css']\n})\nexport class GasCalculatorComponent implements OnInit {\n  startLocation: string = '';\n  endLocation: string = '';\n  fuelCapacity: string = '';\n  distance: string = '';\n  mpg: number = 0;\n  tankCapacity: number = 0;\n  private startInput: HTMLElement | null;\n  private endInput: HTMLElement | null;\n  private fuelCapacityInput: HTMLElement | null;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.startInput = document.getElementById('startLocation');\n    this.endInput = document.getElementById('endLocation');\n    this.fuelCapacityInput = document.getElementById('fuelCapacity');\n\n    const startAutocomplete = new google.maps.places.Autocomplete(this.startInput);\n    const endAutocomplete = new google.maps.places.Autocomplete(this.endInput);\n\n    startAutocomplete.addListener('place_changed', () => {\n      this.calculateFuelAndDistance();\n    });\n\n    endAutocomplete.addListener('place_changed', () => {\n      this.calculateFuelAndDistance();\n    });\n\n    // ...\n  }\n\n\n  updateFuelCapacity() {\n    const fuelCapacity = this.mpg * this.tankCapacity;\n    this.fuelCapacity = fuelCapacity.toFixed(2);\n  }\n\n  calculateFuelAndDistance() {\n    if (this.startLocation && this.endLocation && this.mpg && this.tankCapacity) {\n      const directionsService = new google.maps.DirectionsService();\n      const startLocation = this.startLocation;\n      const endLocation = this.endLocation;\n      const mpg = this.mpg;\n      const tankCapacity = this.tankCapacity;\n      const fuelCapacityInput = document.getElementById('fuelCapacity') as HTMLInputElement;\n      const distanceInput = document.getElementById('distance') as HTMLInputElement;\n      const stopsRequiredOutput = document.getElementById('stopsRequired');\n\n      directionsService.route(\n        {\n          origin: startLocation,\n          destination: endLocation,\n          travelMode: google.maps.TravelMode.DRIVING,\n        },\n        (response: any, status: any) => {\n          if (status === google.maps.DirectionsStatus.OK) {\n            const distance = response.routes[0].legs[0].distance.value / 1609.34;\n            if (distanceInput) {\n              this.distance = distance.toFixed(2);\n            }\n\n            const fuelCapacity = parseFloat(String(mpg)) * parseFloat(String(tankCapacity));\n            fuelCapacityInput.value = fuelCapacity.toFixed(2);\n\n\n            const stopsRequired = Math.ceil(distance / fuelCapacity);\n            if (stopsRequiredOutput) {\n              stopsRequiredOutput.innerHTML = `You will need to make ${stopsRequired} stop(s) for gas.`;\n            }\n\n          } else {\n            if (fuelCapacityInput) {\n              fuelCapacityInput.value = '';\n            }\n            if (stopsRequiredOutput) {\n              stopsRequiredOutput.innerHTML = '';\n            }\n            alert(`Directions request failed due to ${status}`);\n          }\n        }\n      );\n    } else {\n      const fuelCapacityInput = document.getElementById('fuelCapacity') as HTMLInputElement;\n      const stopsRequiredOutput = document.getElementById('stopsRequired');\n      if (fuelCapacityInput) {\n        fuelCapacityInput.value = '';\n      }\n      if (stopsRequiredOutput) {\n        stopsRequiredOutput.innerHTML = '';\n      }\n    }\n  }\n\n  onInputChange() {\n    this.calculateFuelAndDistance();\n  }\n}\n","<!DOCTYPE html>\n<html>\n<head>\n  <title>Fuel Calculator</title>\n  <style>\n    label {\n      display: block;\n      margin-bottom: 10px;\n    }\n    input[type=text] {\n      padding: 5px;\n      width: 100%;\n      box-sizing: border-box;\n      margin-bottom: 10px;\n    }\n    button {\n      padding: 10px 20px;\n      background-color: #4CAF50;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 16px;\n    }\n    button:hover {\n      background-color: #45a049;\n    }\n    #output {\n      margin-top: 20px;\n    }\n  </style>\n\n</head>\n<body>\n<div>\n  <div>\n    <label for=\"startLocation\">Start Location:</label>\n    <input type=\"text\" id=\"startLocation\" name=\"startLocation\" [(ngModel)]=\"startLocation\" (input)=\"onInputChange()\" />\n\n    <label for=\"endLocation\">End Location:</label>\n    <input type=\"text\" id=\"endLocation\" name=\"endLocation\" [(ngModel)]=\"endLocation\" (input)=\"onInputChange()\" />\n\n    <label for=\"mpg\">MPG:</label>\n    <input type=\"number\" id=\"mpg\" name=\"mpg\" [(ngModel)]=\"mpg\" (change)=\"onInputChange()\" />\n\n    <label for=\"tankCapacity\">Tank Capacity:</label>\n    <input type=\"number\" id=\"tankCapacity\" name=\"tankCapacity\" [(ngModel)]=\"tankCapacity\" (change)=\"onInputChange()\" />\n\n    <label for=\"fuelCapacity\">Fuel Capacity (Miles):</label>\n    <input type=\"text\" id=\"fuelCapacity\" name=\"fuelCapacity\" readonly [(ngModel)]=\"fuelCapacity\" />\n\n    <label for=\"distance\">Distance (Miles):</label>\n    <input type=\"text\" id=\"distance\" name=\"distance\" readonly [(ngModel)]=\"distance\" />\n\n    <p id=\"stopsRequired\"></p>\n\n    <button type=\"button\" (click)=\"calculateFuelAndDistance()\">Calculate</button>\n\n  </div>\n\n\n</div>\n\n\n<script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAveULz0kjUIAZ--Ufdo0n7wBswHdo_y8o&callback=initMap&libraries=places\" defer></script>\n<script src=\"script.js\"></script>\n</body>\n</html>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}